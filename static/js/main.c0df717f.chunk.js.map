{"version":3,"sources":["logo.svg","components/Wrapper/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","props","react_default","a","createElement","className","children","ImageCard","onClick","handleScoreIncrement","id","alt","name","src","image","styles","footerImage","width","footer","background","height","position","color","overflow","bottom","marginTop","marginLeft","App","state","score","topScore","console","log","clicked","narray","_this","y","length","identifier","alert","setState","i","winReset","testShuffle","shuffleArray","array","temp","x","j","Math","floor","random","this","_this2","href","components_Wrapper","map","components_ImageCard","key","style","logo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0df717f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.handleScoreIncrement(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport image from \"./image.json\";\nimport ImageCard from \"./components/ImageCard\"\n\nconst styles = {\n  footerImage: {\n    width: 30\n  },\n  footer: {\n    background: \"#6956af\",\n    height: \"50px\",\n    position: \"relative\",\n    color: \"#fff\",\n    overflow: \"hidden\"\n  },\n  bottom: {\n    position: \"absolute\",\n    marginTop: -100,\n    marginLeft: 10\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    image,\n    score: 0,\n    topScore: 0,\n  }\n\n  shuffleArray (array) {\n    var x = array.length, j = 0, temp;\n\n    while (x--) {\n      j = Math.floor(Math.random()*(x+1));\n\n      temp = array[x];\n      array[x] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  winReset () {\n    if (this.state.score === 12) {\n      alert(\"You win! Great Job!\");\n      if (this.state.score > this.state.topScore) {\n        this.setState({ topScore: this.state.score});\n      }\n      for(var i=0; i < image.length; i++) {\n        image[i].clicked = false;\n      }\n      this.setState({ score: 0 });\n    }\n  }\n\n  handleScoreIncrement = id => {\n    console.log(image[id-1].clicked);\n    var narray = this.state.image;\n    console.log(id);\n\n    for (var y = 0; y < narray.length; y++) {\n      if (id === narray[y].id) {\n        console.log(\"Found it! \" + narray[y].id);\n        var identifier = narray[y];\n        if(!identifier.clicked) {\n          identifier.clicked = true;\n          this.setState({ score: this.state.score + 1});\n          this.winReset();\n        } else {\n          alert(\"YOU LOSE LOSERRRRRRR\");\n          if (this.state.score > this.state.topScore) {\n            this.setState({ topScore: this.state.score});\n          }\n          for(var i=0; i < image.length; i++) {\n            image[i].clicked = false;\n          }\n          this.setState({ score: 0 });\n        }\n      }\n    }\n\n    var testShuffle = this.shuffleArray(narray);\n    console.log(testShuffle);\n\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-light bg-warning\">\n          Clicky Game\n          <a href=\"/\"><button className=\"btn btn-info\"><span> Reset Game </span></button></a>\n          <span>Score: {this.state.score} | Top Score: {this.state.topScore}</span>\n        </nav>\n        <header className=\"header\">\n          <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n              <h1 className=\"display-4\">Clicky Game!</h1>\n              <p className=\"lead\">Click on an image to earn points, but don't click on any more than once! Try to get all 12!</p>\n            </div>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Wrapper>\n            {this.state.image.map(i => (\n              <ImageCard\n                id={i.id}\n                key={i.id}\n                clicked={i.clicked}\n                name={i.name}\n                image={i.image}\n                handleScoreIncrement = {this.handleScoreIncrement}\n              />\n            ))}\n          </Wrapper>\n        </main>\n        <div className=\"footer navbar-fixed-bottom\" style={styles.footer}>\n          <div style={styles.bottom}>\n            Clicky Game! \n            <img style={styles.footerImage} src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}